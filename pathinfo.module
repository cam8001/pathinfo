<?php

/**
* Implementation of hook_menu().
*/
function pathinfo_menu() {
  $items = array();

  $items['node/%node/pathinfo'] = array(
    'title' => 'Path Info',
    'page callback' => 'pathinfo_detail_page',
    'page arguments' => array(1, 'node'),
    'access callback' => 'user_access',
    'access arguments' => array('access path info'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100,
  );

  return $items;
}


/**
 * Implementation of hook_block().
 *
 * @param <type> $node
 * @return <type>
 */
function pathinfo_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
        'info' => t('PathInfo URL Information'),
        'weight' => 0,
        'status' => 1,
        'region' => 'header',
    );
    
    return $blocks;

  }
  else if ($op =='view') {
    switch ($delta) {
      case 0:
        $block = array(
          'subject' => t('Dog'),
          'content' => theme('infopane', pathinfo_detail()),
        );
      break;
    }
    
    return $block;
  }
}

/**
 * Implementation of hook_theme().
 */
function pathinfo_theme() {
  return array(
    'infopane' => array(
      'variables' => array('pathinfo' => NULL),
      'template' => 'infopane'
     )
  );
}


/**
 * Assemble a structured array that contains information about a given path.
 * The array will contain data such as the function that fulfils the path request,
 * where it is defined, whether the path is an alias, and other details.
 * 
 * Information about the implementing module is stored in 
 * $info['module_info'][$module_name]. This information can be extended by 
 * modules by implementing hook_module_info(). hook_module_info() implementations
 * must return an array.
 * 
 * 
 * If the path is not passed explicitly, this function will use the path of the
 * current page.
 * 
 * 
 * @param string $path 
 *  Path to check.
 * 
 * @return array
 *  A structured array containing information about $path, or FALSE if nothing
 *  can be found.
 * 
 */
function pathinfo_detail($path = NULL) {
  // If no path has been passed, get the path from the current URL
  if ( $path == NULL ) {
    $path = $_GET['q'];
    // If there is no path, we must be looking at the front page.
    if (drupal_is_front_page()) {
      $front_page = TRUE;
      $path = drupal_get_normal_path(variable_get('site_frontpage', 'node'));
    }
  }
  
  // Check if the path is an alias.
  if (function_exists('path_help')) {
    $alias = drupal_get_path_alias($path);
  }
  
  $info = array();
  
  $info['menu'] = menu_get_item($path);
  // Get the module that contains the function that serves this page.
  $function = $info['menu']['page_callback'];
  $module = pathinfo_get_module_for_function($function);
  
  $info['module_info'][$module] = array(
    'function' => $function,
    'path' =>  realpath(drupal_get_path('module', $module)),
  ) + call_user_func($module .'_module_info', $path); // Add any additional module info that hooks may want to provide.
  
  // Save some general info that is useful for theming
  $info['is_front_page'] = (bool)$front_page;
  $info['alias'] = (string)$alias;
  $info['path_requested'] = $path;
  $info['is_alias'] = $alias == $path ? TRUE : FALSE;
  dpm($info);
  return $info;
  
  //$info['module']
  
  // probably don't need module invoke all as we'll only ever be calling the
  // function for the module that implements this page view.
  //$module_info = module_invoke_all('module_info');
  //dpm($module_info);
  
}

/**
 * Hack to implement module_info hook for common modules.
 */
function pathinfo_module_info($info) {


  $default_modules = array(
    'views',
    'content',
    'node',
  );

  // Go through the module info hooks we implement.
  // If they are implemented elsewhere, they will be called by module_invoke_all.
  // otherwise use our defaults.
  /*
  foreach($default_modules as $module) {
   $function = $module .'_module_info';
   if(!function_exists($module .'_module_info')) {
     $return[] = call_user_func($function);
   }
  }
  */

  return $return;
 
}

function views_module_info() {
  return 'views';
}

function node_module_info($path) {
  //$nid = 'no'
  
}

/**
 * Given a function name, return the module that it appears in.
 *
 * @todo test with modules with overlapping names, eg node and node_dog. Just have to
 * find some good test cases.
 * 
 * @todo It seems that module_list() is very fast (use static cache), and we can call 
 * it many times per request without a meaningful perfomance impact. However, it
 * is worth monitoring for performance issues.
 *
 * @param string $function_name
 * @return string The module name, or an empty string if not found.
 */
function pathinfo_get_module_for_function($function_name) {
  $implemented_in = '';
  $modules = module_list();
  // Go through all loaded modules
  foreach ($modules as $module) {
    //dpm(strstr($function_name, $module), 'strstr');
    if (strstr($function_name, $module)) {
      if (strlen($module) > strlen($implemented_in)) {
        $implemented_in = $module;
      }
    }
  }

  return $implemented_in;
}